// ðŸ“„ SongList.jsx

import React, { useEffect, useState, useRef } from "react";
import axios from "axios";

export default function SongList({ token, onLogout }) {
  const [songs, setSongs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [uploadTarget, setUploadTarget] = useState("local");
  const audioRef = useRef(null);
  const [currentSong, setCurrentSong] = useState(null);

  const fetchSongs = async () => {
    try {
      const authToken = token || localStorage.getItem("token");
      if (!authToken) {
        console.warn("No auth token found.");
        setLoading(false);
        return;
      }

      const res = await axios.get("http://localhost:8080/api/songs/users", {
        headers: { Authorization: `Bearer ${authToken}` },
      });

      if (Array.isArray(res.data)) {
        setSongs(res.data);
      } else {
        console.warn("Unexpected response:", res.data);
        setSongs([]);
      }
    } catch (err) {
      console.error("Error fetching songs:", err);
      setSongs([]);
    } finally {
      setLoading(false);
    }
  };

  const handleUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    const authToken = token || localStorage.getItem("token");
    const formData = new FormData();
    formData.append("file", file);

    try {
	  const endpoint =
		  uploadTarget === "s3"
			? "http://localhost:8080/api/songs/upload?storageType=S3"
			: "http://localhost:8080/api/songs/upload?storageType=LOCAL";


      await axios.post(endpoint, formData, {
        headers: {
          Authorization: `Bearer ${authToken}`,
          "Content-Type": "multipart/form-data",
        },
      });

      alert(`Uploaded to ${uploadTarget.toUpperCase()} successfully!`);
      fetchSongs(); // refresh list
    } catch (err) {
      console.error("Upload failed:", err);
      alert("Upload failed.");
    }
  };


  
  const handlePlay = (song) => {
	  console.info("start handlePlay:", song);

	  if (!audioRef.current) {
		console.warn("No audioRef.current found â€” audio element might not be mounted yet.");
		return;
	  }

	  console.info("audioRef.current before play:", audioRef.current);
	  console.info("current src before play:", audioRef.current.src);

	  // Build URL for streaming endpoint
	  const token = localStorage.getItem("jwt_token"); // or wherever you store it
	  const streamUrl = `http://localhost:8080/api/songs/stream/${encodeURIComponent(song.fileName)}?sourceStorageType=${song.storageType}`;

	  // Attach src with auth token (via query param or fetch)
	  // If using fetch with Bearer token, need blob -> object URL
	  fetch(streamUrl, {
		headers: {
		  Authorization: `Bearer ${token}`,
		},
	  })
		.then((res) => res.blob())
		.then((blob) => {
		  const audioUrl = URL.createObjectURL(blob);
		  audioRef.current.src = audioUrl;
		  audioRef.current.load();
		  audioRef.current.play();
		})
		.catch((err) => {
		  console.error("Error streaming song:", err);
		});
	};


  const handleLogout = () => {
    localStorage.removeItem("token");
    if (onLogout) onLogout();
  };

  useEffect(() => {
    fetchSongs();
  }, [token]);

  return (
    <div>
      <header style={{ display: "flex", justifyContent: "space-between" }}>
        <h2>My Music</h2>
        <button onClick={handleLogout}>Logout</button>
      </header>

      {loading && <p>Loading songs...</p>}
      {!loading && songs.length > 0 && (
        <ul>
          {songs.map((song, idx) => (
            <li key={idx}>
              {song.title || JSON.stringify(song)}
              <button onClick={() => handlePlay(song)}>â–¶ Play</button>
            </li>
          ))}
        </ul>
      )}
      {!loading && songs.length === 0 && <p>No songs available</p>}

      {/* Audio Player */}
      {currentSong && (
        <div style={{ marginTop: "10px" }}>
          <p>Now Playing: {currentSong.title}</p>
          <audio ref={audioRef} controls>
            <source src={currentSong.url} type="audio/mpeg" />
            Your browser does not support the audio element.
          </audio>
        </div>
      )}

      {/* Upload Section */}
      <div style={{ marginTop: "20px" }}>
        <h3>Upload More Music</h3>
        <label>
          Destination:{" "}
          <select
            value={uploadTarget}
            onChange={(e) => setUploadTarget(e.target.value)}
          >
            <option value="local">Local</option>
            <option value="s3">S3</option>
          </select>
        </label>
        <input
          type="file"
          accept="audio/*"
          onChange={handleUpload}
          style={{ display: "block", marginTop: "10px" }}
        />
      </div>
    </div>
  );
}
